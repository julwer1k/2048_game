{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAWI,EAXE,EAAc,SAAS,sBAAsB,CAAC,gBAAgB,CAAC,EAAE,CACjE,EAAe,SAAS,sBAAsB,CAAC,iBAAiB,CAAC,EAAE,CACnE,EAAgB,SAAS,sBAAsB,CAAC,kBAAkB,CAAC,EAAE,CACrE,EAAc,SAAS,sBAAsB,CAAC,gBAAgB,CAAC,EAAE,CACjE,EAAa,SAAS,sBAAsB,CAAC,eAAe,CAAC,EAAE,CAC/D,EAAa,SAAS,sBAAsB,CAAC,aAAa,CAAC,EAAE,CAC7D,EAAQ,SAAS,sBAAsB,CAAC,QAM1C,EAAQ,EACR,EAAW,CAAA,EAwDf,SAAS,IACH,AAwNN,CAAA,WACE,GAAI,IACF,MAAO,CAAA,EAGT,IAAK,IAAI,EAAM,EAAG,EA1RP,EA0RmB,IAC5B,IAAK,IAAI,EAAS,EAAG,EA1RT,EA0R2B,IAAU,CAC/C,IAAM,EAAc,CAAK,CAAC,EAAI,CAAC,EAAO,CAEtC,GAAI,EAAS,GAAe,IAAgB,CAAK,CAAC,EAAI,CAAC,EAAS,EAAE,EAI9D,EAAM,GAAY,IAAgB,CAAK,CAAC,EAAM,EAAE,CAAC,EAAO,CAH1D,MAAO,CAAA,CAMX,CAGF,MAAO,CAAA,CACT,CAAA,MA3OI,EAAW,CAAA,EACX,EAAY,SAAS,CAAC,MAAM,CAAC,mBAEjC,CAEA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EApEL,EAoEe,IACxB,IAAK,IAAI,EAAI,EAAG,EApEJ,EAoEiB,IAC3B,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startButton = document.getElementsByClassName(\"button--start\")[0];\nvar startMessage = document.getElementsByClassName(\"message--start\")[0];\nvar restartButton = document.getElementsByClassName(\"button--restart\")[0];\nvar lostMessage = document.getElementsByClassName(\"message--lose\")[0];\nvar winMessage = document.getElementsByClassName(\"message--win\")[0];\nvar scoreBoard = document.getElementsByClassName(\"game-score\")[0];\nvar tiles = document.getElementsByClassName(\"tile\");\n// Variables\nvar ROWS = 4;\nvar COLUMNS = 4;\nvar board;\nvar score = 0;\nvar gameOver = false;\nfunction printBoard() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    for(var r = 0; r < ROWS; r++)for(var c = 0; c < COLUMNS; c++){\n        var tile = document.createElement(\"div\");\n        var num = board[r][c];\n        tile.id = r.toString() + \"-\" + c.toString();\n        updateTile(tile, num);\n        document.getElementById(\"board\").append(tile);\n    }\n}\nstartButton.addEventListener(\"click\", function startGame() {\n    printBoard();\n    startButton.classList.add(\"button--hidden\");\n    startMessage.classList.add(\"message--hidden\");\n    restartButton.classList.remove(\"button--hidden\");\n    addNum();\n    addNum();\n});\nrestartButton.addEventListener(\"click\", function restartGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    var tilesArray = Array.from(tiles);\n    tilesArray.forEach(function(tile) {\n        tile.innerText = \"\";\n        tile.className = \"tile\";\n    });\n    score = 0;\n    scoreBoard.innerText = score;\n    lostMessage.classList.add(\"message--hidden\");\n    winMessage.classList.add(\"message--hidden\");\n    gameOver = false;\n    addNum();\n    addNum();\n});\nfunction checkEndGame() {\n    if (endGame()) {\n        gameOver = true;\n        lostMessage.classList.remove(\"message--hidden\");\n    }\n}\nfunction isEmpty() {\n    for(var r = 0; r < ROWS; r++)for(var c = 0; c < COLUMNS; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction addNum() {\n    var _loop = function() {\n        var r = Math.floor(Math.random() * ROWS);\n        var c = Math.floor(Math.random() * COLUMNS);\n        if (board[r][c] === 0) {\n            var num = Math.random() < 0.1 ? 4 : 2;\n            board[r][c] = num;\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            tile.innerText = num.toString();\n            tile.classList.add(\"tile--\".concat(num));\n            tile.classList.add(\"tile--pop\");\n            setTimeout(function() {\n                tile.classList.remove(\"tile--pop\");\n            }, 500);\n            found = true;\n        }\n    };\n    if (!isEmpty()) return;\n    var found = false;\n    while(!found)_loop();\n}\ndocument.addEventListener(\"keydown\", function(event) {\n    if (gameOver) return;\n    var boardChanged = false;\n    switch(event.key){\n        case \"ArrowLeft\":\n            boardChanged = slideLeft();\n            break;\n        case \"ArrowRight\":\n            boardChanged = slideRight();\n            break;\n        case \"ArrowUp\":\n            boardChanged = slideUp();\n            break;\n        case \"ArrowDown\":\n            boardChanged = slideDown();\n            break;\n    }\n    if (boardChanged) addNum();\n    scoreBoard.innerText = score;\n});\nfunction slideLeft() {\n    return moveLeftRight(\"left\");\n}\nfunction slideRight() {\n    return moveLeftRight(\"right\");\n}\nfunction slideUp() {\n    return moveUpDown(\"up\");\n}\nfunction slideDown() {\n    return moveUpDown(\"down\");\n}\nfunction moveLeftRight(direction) {\n    checkEndGame();\n    var boardChanged = false;\n    for(var r = 0; r < ROWS; r++){\n        var row = board[r];\n        var originalRow = _to_consumable_array(row);\n        switch(direction){\n            case \"left\":\n                row = slide(row);\n                board[r] = row;\n                break;\n            case \"right\":\n                row.reverse();\n                row = slide(row);\n                board[r] = row.reverse();\n                break;\n        }\n        if (!arraysEqual(originalRow, row)) boardChanged = true;\n        for(var c = 0; c < COLUMNS; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n    return boardChanged;\n}\nfunction moveUpDown(direction) {\n    checkEndGame();\n    var boardChanged = false;\n    for(var c = 0; c < COLUMNS; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var originalRow = _to_consumable_array(row);\n        switch(direction){\n            case \"up\":\n                row = slide(row);\n                break;\n            case \"down\":\n                row.reverse();\n                row = slide(row);\n                row.reverse();\n                break;\n        }\n        if (!arraysEqual(originalRow, row)) boardChanged = true;\n        for(var r = 0; r < ROWS; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n    return boardChanged;\n}\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\nfunction filterZero(row) {\n    return row.filter(function(number) {\n        return number !== 0;\n    });\n}\nfunction updateTile(tile, num) {\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"tile\");\n    if (num > 0) {\n        tile.innerText = num.toString();\n        if (num <= 2048) {\n            tile.classList.add(\"tile--\".concat(num));\n            if (num === 2048) {\n                winMessage.classList.remove(\"message--hidden\");\n                gameOver = true;\n            }\n        }\n    }\n}\nfunction slide(row) {\n    row = filterZero(row);\n    var mergedRow = [];\n    for(var i = 0; i < row.length; i++)if (row[i] === row[i + 1]) {\n        mergedRow.push(row[i] * 2);\n        score += row[i] * 2;\n        i++;\n    } else mergedRow.push(row[i]);\n    while(mergedRow.length < COLUMNS)mergedRow.push(0);\n    return mergedRow;\n}\nfunction endGame() {\n    if (isEmpty()) return false;\n    for(var row = 0; row < ROWS; row++)for(var column = 0; column < COLUMNS; column++){\n        var currentTile = board[row][column];\n        if (column < COLUMNS - 1 && currentTile === board[row][column + 1]) return false;\n        if (row < ROWS - 1 && currentTile === board[row + 1][column]) return false;\n    }\n    return true;\n}\n\n//# sourceMappingURL=index.01826940.js.map\n","'use strict';\n\nconst startButton = document.getElementsByClassName('button--start')[0];\nconst startMessage = document.getElementsByClassName('message--start')[0];\nconst restartButton = document.getElementsByClassName('button--restart')[0];\nconst lostMessage = document.getElementsByClassName('message--lose')[0];\nconst winMessage = document.getElementsByClassName('message--win')[0];\nconst scoreBoard = document.getElementsByClassName('game-score')[0];\nconst tiles = document.getElementsByClassName('tile');\n\n// Variables\nconst ROWS = 4;\nconst COLUMNS = 4;\nlet board;\nlet score = 0;\nlet gameOver = false;\n\nfunction printBoard() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < ROWS; r++) {\n    for (let c = 0; c < COLUMNS; c++) {\n      const tile = document.createElement('div');\n      const num = board[r][c];\n\n      tile.id = r.toString() + '-' + c.toString();\n      updateTile(tile, num);\n\n      document.getElementById('board').append(tile);\n    }\n  }\n}\n\nstartButton.addEventListener('click', function startGame() {\n  printBoard();\n  startButton.classList.add('button--hidden');\n  startMessage.classList.add('message--hidden');\n  restartButton.classList.remove('button--hidden');\n  addNum();\n  addNum();\n});\n\nrestartButton.addEventListener('click', function restartGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  const tilesArray = Array.from(tiles);\n\n  tilesArray.forEach((tile) => {\n    tile.innerText = '';\n    tile.className = 'tile';\n  });\n\n  score = 0;\n  scoreBoard.innerText = score;\n  lostMessage.classList.add('message--hidden');\n  winMessage.classList.add('message--hidden');\n  gameOver = false;\n  addNum();\n  addNum();\n});\n\nfunction checkEndGame() {\n  if (endGame()) {\n    gameOver = true;\n    lostMessage.classList.remove('message--hidden');\n  }\n}\n\nfunction isEmpty() {\n  for (let r = 0; r < ROWS; r++) {\n    for (let c = 0; c < COLUMNS; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addNum() {\n  if (!isEmpty()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * ROWS);\n    const c = Math.floor(Math.random() * COLUMNS);\n\n    if (board[r][c] === 0) {\n      const num = Math.random() < 0.1 ? 4 : 2;\n\n      board[r][c] = num;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = num.toString();\n      tile.classList.add(`tile--${num}`);\n\n      tile.classList.add('tile--pop');\n\n      setTimeout(function() {\n        tile.classList.remove('tile--pop');\n      }, 500);\n      found = true;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', event => {\n  if (gameOver) {\n    return;\n  }\n\n  let boardChanged = false;\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      boardChanged = slideLeft();\n      break;\n    case 'ArrowRight':\n      boardChanged = slideRight();\n      break;\n    case 'ArrowUp':\n      boardChanged = slideUp();\n      break;\n    case 'ArrowDown':\n      boardChanged = slideDown();\n      break;\n  }\n\n  if (boardChanged) {\n    addNum();\n  }\n  scoreBoard.innerText = score;\n});\n\nfunction slideLeft() {\n  return moveLeftRight('left');\n}\n\nfunction slideRight() {\n  return moveLeftRight('right');\n}\n\nfunction slideUp() {\n  return moveUpDown('up');\n}\n\nfunction slideDown() {\n  return moveUpDown('down');\n}\n\nfunction moveLeftRight(direction) {\n  checkEndGame();\n\n  let boardChanged = false;\n\n  for (let r = 0; r < ROWS; r++) {\n    let row = board[r];\n    let originalRow = [...row];\n\n    switch (direction) {\n      case 'left':\n        row = slide(row);\n        board[r] = row;\n        break;\n      case 'right':\n        row.reverse();\n        row = slide(row);\n        board[r] = row.reverse();\n        break;\n    }\n\n    if (!arraysEqual(originalRow, row)) {\n      boardChanged = true;\n    }\n\n    for (let c = 0; c < COLUMNS; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n      updateTile(tile, num);\n    }\n  }\n\n  return boardChanged;\n}\n\nfunction moveUpDown(direction) {\n  checkEndGame();\n  let boardChanged = false;\n\n  for (let c = 0; c < COLUMNS; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    let originalRow = [...row];\n\n    switch (direction) {\n      case 'up':\n        row = slide(row);\n        break;\n      case 'down':\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        break;\n    }\n\n    if (!arraysEqual(originalRow, row)) {\n      boardChanged = true;\n    }\n\n    for (let r = 0; r < ROWS; r++) {\n      board[r][c] = row[r];\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n      updateTile(tile, num);\n    }\n  }\n\n  return boardChanged;\n}\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  return true;\n}\n\nfunction filterZero(row) {\n  return row.filter(number => number !== 0);\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('tile');\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n\n    if (num <= 2048) {\n      tile.classList.add(`tile--${num}`);\n\n      if (num === 2048) {\n        winMessage.classList.remove('message--hidden');\n        gameOver = true;\n      }\n    }\n  }\n}\n\nfunction slide(row) {\n  row = filterZero(row);\n  let mergedRow = [];\n\n  for (let i = 0; i < row.length; i++) {\n    if (row[i] === row[i + 1]) {\n      mergedRow.push(row[i] * 2);\n      score += row[i] * 2;\n      i++;\n    } else {\n      mergedRow.push(row[i]);\n    }\n  }\n\n  while (mergedRow.length < COLUMNS) {\n    mergedRow.push(0);\n  }\n\n  return mergedRow;\n}\n\nfunction endGame() {\n  if (isEmpty()) {\n    return false;\n  }\n\n  for (let row = 0; row < ROWS; row++) {\n    for (let column = 0; column < COLUMNS; column++) {\n      const currentTile = board[row][column];\n\n      if (column < COLUMNS - 1 && currentTile === board[row][column + 1]) {\n        return false;\n      }\n\n      if (row < ROWS - 1 && currentTile === board[row + 1][column]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","startButton","document","getElementsByClassName","startMessage","restartButton","lostMessage","winMessage","scoreBoard","tiles","score","gameOver","checkEndGame","endGame","isEmpty","row","column","currentTile","COLUMNS","ROWS","classList","remove","r","c","addNum","found","_loop","Math","floor","random","num","tile","getElementById","innerText","add","concat","setTimeout","moveLeftRight","direction","boardChanged","originalRow","slide","reverse","arraysEqual","updateTile","moveUpDown","arr1","value","filter","number","mergedRow","push","addEventListener","printBoard","createElement","id","append","tilesArray","forEach","className","event","key"],"version":3,"file":"index.01826940.js.map"}